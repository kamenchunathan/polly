-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PollApi.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import PollApi.Interface
import PollApi.Object
import PollApi.Scalar
import PollApi.ScalarCodecs
import PollApi.Union


buildAddPollCharFieldAnswerInput :
    AddPollCharFieldAnswerInputRequiredFields
    -> (AddPollCharFieldAnswerInputOptionalFields -> AddPollCharFieldAnswerInputOptionalFields)
    -> AddPollCharFieldAnswerInput
buildAddPollCharFieldAnswerInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientMutationId = Absent }
    in
    { answer = required____.answer, user = required____.user, field = required____.field, id = optionals____.id, clientMutationId = optionals____.clientMutationId }


type alias AddPollCharFieldAnswerInputRequiredFields =
    { answer : String
    , user : PollApi.ScalarCodecs.Id
    , field : PollApi.ScalarCodecs.Id
    }


type alias AddPollCharFieldAnswerInputOptionalFields =
    { id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPollCharFieldAnswerInput input object.
-}
type alias AddPollCharFieldAnswerInput =
    { answer : String
    , user : PollApi.ScalarCodecs.Id
    , field : PollApi.ScalarCodecs.Id
    , id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPollCharFieldAnswerInput into a value that can be used as an argument.
-}
encodeAddPollCharFieldAnswerInput : AddPollCharFieldAnswerInput -> Value
encodeAddPollCharFieldAnswerInput input____ =
    Encode.maybeObject
        [ ( "answer", Encode.string input____.answer |> Just ), ( "user", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.user |> Just ), ( "field", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.field |> Just ), ( "id", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPollCharFieldInput :
    AddPollCharFieldInputRequiredFields
    -> (AddPollCharFieldInputOptionalFields -> AddPollCharFieldInputOptionalFields)
    -> AddPollCharFieldInput
buildAddPollCharFieldInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientMutationId = Absent }
    in
    { text = required____.text, poll = required____.poll, id = optionals____.id, clientMutationId = optionals____.clientMutationId }


type alias AddPollCharFieldInputRequiredFields =
    { text : String
    , poll : PollApi.ScalarCodecs.Id
    }


type alias AddPollCharFieldInputOptionalFields =
    { id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPollCharFieldInput input object.
-}
type alias AddPollCharFieldInput =
    { text : String
    , poll : PollApi.ScalarCodecs.Id
    , id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPollCharFieldInput into a value that can be used as an argument.
-}
encodeAddPollCharFieldInput : AddPollCharFieldInput -> Value
encodeAddPollCharFieldInput input____ =
    Encode.maybeObject
        [ ( "text", Encode.string input____.text |> Just ), ( "poll", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.poll |> Just ), ( "id", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPollChoiceFieldAnswerInput :
    AddPollChoiceFieldAnswerInputRequiredFields
    -> (AddPollChoiceFieldAnswerInputOptionalFields -> AddPollChoiceFieldAnswerInputOptionalFields)
    -> AddPollChoiceFieldAnswerInput
buildAddPollChoiceFieldAnswerInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientMutationId = Absent }
    in
    { selectedChoice = required____.selectedChoice, user = required____.user, field = required____.field, id = optionals____.id, clientMutationId = optionals____.clientMutationId }


type alias AddPollChoiceFieldAnswerInputRequiredFields =
    { selectedChoice : String
    , user : PollApi.ScalarCodecs.Id
    , field : PollApi.ScalarCodecs.Id
    }


type alias AddPollChoiceFieldAnswerInputOptionalFields =
    { id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPollChoiceFieldAnswerInput input object.
-}
type alias AddPollChoiceFieldAnswerInput =
    { selectedChoice : String
    , user : PollApi.ScalarCodecs.Id
    , field : PollApi.ScalarCodecs.Id
    , id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPollChoiceFieldAnswerInput into a value that can be used as an argument.
-}
encodeAddPollChoiceFieldAnswerInput : AddPollChoiceFieldAnswerInput -> Value
encodeAddPollChoiceFieldAnswerInput input____ =
    Encode.maybeObject
        [ ( "selectedChoice", Encode.string input____.selectedChoice |> Just ), ( "user", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.user |> Just ), ( "field", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.field |> Just ), ( "id", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPollChoiceFieldInput :
    AddPollChoiceFieldInputRequiredFields
    -> (AddPollChoiceFieldInputOptionalFields -> AddPollChoiceFieldInputOptionalFields)
    -> AddPollChoiceFieldInput
buildAddPollChoiceFieldInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientMutationId = Absent }
    in
    { text = required____.text, poll = required____.poll, choices = required____.choices, id = optionals____.id, clientMutationId = optionals____.clientMutationId }


type alias AddPollChoiceFieldInputRequiredFields =
    { text : String
    , poll : PollApi.ScalarCodecs.Id
    , choices : String
    }


type alias AddPollChoiceFieldInputOptionalFields =
    { id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPollChoiceFieldInput input object.
-}
type alias AddPollChoiceFieldInput =
    { text : String
    , poll : PollApi.ScalarCodecs.Id
    , choices : String
    , id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPollChoiceFieldInput into a value that can be used as an argument.
-}
encodeAddPollChoiceFieldInput : AddPollChoiceFieldInput -> Value
encodeAddPollChoiceFieldInput input____ =
    Encode.maybeObject
        [ ( "text", Encode.string input____.text |> Just ), ( "poll", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.poll |> Just ), ( "choices", Encode.string input____.choices |> Just ), ( "id", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPollMultiChoiceFieldAnswerInput :
    AddPollMultiChoiceFieldAnswerInputRequiredFields
    -> (AddPollMultiChoiceFieldAnswerInputOptionalFields -> AddPollMultiChoiceFieldAnswerInputOptionalFields)
    -> AddPollMultiChoiceFieldAnswerInput
buildAddPollMultiChoiceFieldAnswerInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientMutationId = Absent }
    in
    { selectedChoices = required____.selectedChoices, user = required____.user, field = required____.field, id = optionals____.id, clientMutationId = optionals____.clientMutationId }


type alias AddPollMultiChoiceFieldAnswerInputRequiredFields =
    { selectedChoices : String
    , user : PollApi.ScalarCodecs.Id
    , field : PollApi.ScalarCodecs.Id
    }


type alias AddPollMultiChoiceFieldAnswerInputOptionalFields =
    { id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPollMultiChoiceFieldAnswerInput input object.
-}
type alias AddPollMultiChoiceFieldAnswerInput =
    { selectedChoices : String
    , user : PollApi.ScalarCodecs.Id
    , field : PollApi.ScalarCodecs.Id
    , id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPollMultiChoiceFieldAnswerInput into a value that can be used as an argument.
-}
encodeAddPollMultiChoiceFieldAnswerInput : AddPollMultiChoiceFieldAnswerInput -> Value
encodeAddPollMultiChoiceFieldAnswerInput input____ =
    Encode.maybeObject
        [ ( "selectedChoices", Encode.string input____.selectedChoices |> Just ), ( "user", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.user |> Just ), ( "field", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.field |> Just ), ( "id", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPollMultiChoiceFieldInput :
    AddPollMultiChoiceFieldInputRequiredFields
    -> (AddPollMultiChoiceFieldInputOptionalFields -> AddPollMultiChoiceFieldInputOptionalFields)
    -> AddPollMultiChoiceFieldInput
buildAddPollMultiChoiceFieldInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientMutationId = Absent }
    in
    { text = required____.text, choices = required____.choices, poll = required____.poll, id = optionals____.id, clientMutationId = optionals____.clientMutationId }


type alias AddPollMultiChoiceFieldInputRequiredFields =
    { text : String
    , choices : String
    , poll : PollApi.ScalarCodecs.Id
    }


type alias AddPollMultiChoiceFieldInputOptionalFields =
    { id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPollMultiChoiceFieldInput input object.
-}
type alias AddPollMultiChoiceFieldInput =
    { text : String
    , choices : String
    , poll : PollApi.ScalarCodecs.Id
    , id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPollMultiChoiceFieldInput into a value that can be used as an argument.
-}
encodeAddPollMultiChoiceFieldInput : AddPollMultiChoiceFieldInput -> Value
encodeAddPollMultiChoiceFieldInput input____ =
    Encode.maybeObject
        [ ( "text", Encode.string input____.text |> Just ), ( "choices", Encode.string input____.choices |> Just ), ( "poll", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.poll |> Just ), ( "id", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPollTextFieldAnswerInput :
    AddPollTextFieldAnswerInputRequiredFields
    -> (AddPollTextFieldAnswerInputOptionalFields -> AddPollTextFieldAnswerInputOptionalFields)
    -> AddPollTextFieldAnswerInput
buildAddPollTextFieldAnswerInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientMutationId = Absent }
    in
    { answer = required____.answer, user = required____.user, field = required____.field, id = optionals____.id, clientMutationId = optionals____.clientMutationId }


type alias AddPollTextFieldAnswerInputRequiredFields =
    { answer : String
    , user : PollApi.ScalarCodecs.Id
    , field : PollApi.ScalarCodecs.Id
    }


type alias AddPollTextFieldAnswerInputOptionalFields =
    { id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPollTextFieldAnswerInput input object.
-}
type alias AddPollTextFieldAnswerInput =
    { answer : String
    , user : PollApi.ScalarCodecs.Id
    , field : PollApi.ScalarCodecs.Id
    , id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPollTextFieldAnswerInput into a value that can be used as an argument.
-}
encodeAddPollTextFieldAnswerInput : AddPollTextFieldAnswerInput -> Value
encodeAddPollTextFieldAnswerInput input____ =
    Encode.maybeObject
        [ ( "answer", Encode.string input____.answer |> Just ), ( "user", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.user |> Just ), ( "field", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.field |> Just ), ( "id", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPollTextFieldInput :
    AddPollTextFieldInputRequiredFields
    -> (AddPollTextFieldInputOptionalFields -> AddPollTextFieldInputOptionalFields)
    -> AddPollTextFieldInput
buildAddPollTextFieldInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, clientMutationId = Absent }
    in
    { text = required____.text, poll = required____.poll, id = optionals____.id, clientMutationId = optionals____.clientMutationId }


type alias AddPollTextFieldInputRequiredFields =
    { text : String
    , poll : PollApi.ScalarCodecs.Id
    }


type alias AddPollTextFieldInputOptionalFields =
    { id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPollTextFieldInput input object.
-}
type alias AddPollTextFieldInput =
    { text : String
    , poll : PollApi.ScalarCodecs.Id
    , id : OptionalArgument PollApi.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPollTextFieldInput into a value that can be used as an argument.
-}
encodeAddPollTextFieldInput : AddPollTextFieldInput -> Value
encodeAddPollTextFieldInput input____ =
    Encode.maybeObject
        [ ( "text", Encode.string input____.text |> Just ), ( "poll", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) input____.poll |> Just ), ( "id", (PollApi.ScalarCodecs.codecs |> PollApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]
